import heapq
goal_state = [[1,2,3],[4,5,6],[7,8,0]]
def manhattan(puzzle):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = puzzle[i][j]
            if value != 0:
                x, y = divmod(value - 1, 3)
                distance += abs(x - i) + abs(y - j)
    return distance
def get_neighbors(state):
    neighbors = []
    x, y = [(ix, iy) for ix, row in enumerate(state) for iy, i in enumerate(row) if i == 0][0]
    moves = [(-1,0),(1,0),(0,-1),(0,1)]
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [list(row) for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors
def solve(start):
    frontier = []
    heapq.heappush(frontier, (manhattan(start), 0, start, []))
    visited = set()
    while frontier:
        est_cost, cost, state, path = heapq.heappop(frontier)
        state_tuple = tuple(tuple(row) for row in state)
        if state == goal_state:
            return path + [state]
        if state_tuple in visited:
            continue
        visited.add(state_tuple)
        for neighbor in get_neighbors(state):
            heapq.heappush(frontier, (
                cost + 1 + manhattan(neighbor), 
                cost + 1, 
                neighbor, 
                path + [state]
            ))
start_state = [[1,2,3],[4,0,6],[7,5,8]]
solution = solve(start_state)
for step in solution:
    for row in step:
        print(row)
    print()
